{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { WebPlugin } from './index';\n\nvar ClipboardPluginWeb =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ClipboardPluginWeb, _super);\n\n  function ClipboardPluginWeb() {\n    return _super.call(this, {\n      name: 'Clipboard',\n      platforms: ['web']\n    }) || this;\n  }\n\n  ClipboardPluginWeb.prototype.write = function (options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!navigator.clipboard) {\n              return [2\n              /*return*/\n              , Promise.reject('Clipboard API not available in this browser')];\n            }\n\n            if (!(options.string || options.url)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , navigator.clipboard.writeText(options.string || options.url)];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (options.image) {\n              return [2\n              /*return*/\n              , Promise.reject(\"Setting images not supported on the web\")];\n            }\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , Promise.resolve()];\n        }\n      });\n    });\n  };\n\n  ClipboardPluginWeb.prototype.read = function (_options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var text, data, _i, _a, item;\n\n      return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!navigator.clipboard) {\n              return [2\n              /*return*/\n              , Promise.reject('Clipboard API not available in this browser')];\n            }\n\n            if (!(_options.type === 'string' || _options.type === 'url')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , navigator.clipboard.readText()];\n\n          case 1:\n            text = _b.sent();\n            return [2\n            /*return*/\n            , Promise.resolve({\n              value: text\n            })];\n\n          case 2:\n            return [4\n            /*yield*/\n            , navigator.clipboard.read()];\n\n          case 3:\n            data = _b.sent();\n\n            for (_i = 0, _a = data.items; _i < _a.length; _i++) {\n              item = _a[_i];\n\n              if (item.type === 'text/plain') {\n                return [2\n                /*return*/\n                , Promise.resolve({\n                  value: item.getAs('text/plain')\n                })];\n              }\n            }\n\n            _b.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            , Promise.reject('Unable to get data from clipboard')];\n        }\n      });\n    });\n  };\n\n  return ClipboardPluginWeb;\n}(WebPlugin);\n\nexport { ClipboardPluginWeb };\nvar Clipboard = new ClipboardPluginWeb();\nexport { Clipboard };","map":null,"metadata":{},"sourceType":"module"}